#!/usr/bin/env python3
import rospy
import torch
import torchvision.transforms as T
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from torchvision.models.segmentation import deeplabv3_resnet50

class SemanticSegmentationNode:
    def __init__(self):
       
        rospy.init_node('semantic_segmentation', anonymous=True)

        self.image_sub = rospy.Subscriber('/cam_streame/image_raw', Image, self.image_callback)

        self.image_pub = rospy.Publisher('/segmented/image', Image, queue_size=10)

        self.bridge = CvBridge()

        self.model = deeplabv3_resnet50(pretrained=True).eval()

        self.transform = T.Compose([
            T.ToPILImage(),
            T.Resize((512, 512)),  
            T.ToTensor(),
            T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])

        rospy.loginfo("Semantic Segmentation Node Initialized!")

    def image_callback(self, msg):
        
        try:
            rospy.loginfo("Received Image!")

            cv_image = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')

            input_tensor = self.transform(cv_image).unsqueeze(0)

            with torch.no_grad():
                output = self.model(input_tensor)['out'][0]
                output_predictions = output.argmax(0).byte().cpu().numpy()

            segmented_image = self.visualize_segmentation(output_predictions)

            segmented_msg = self.bridge.cv2_to_imgmsg(segmented_image, encoding='bgr8')
            self.image_pub.publish(segmented_msg)

            rospy.loginfo("Published Segmented Image!")

        except Exception as e:
            rospy.logerr(f"Error processing image: {e}")

    def visualize_segmentation(self, mask):
        num_classes = 21  
        colors = np.random.randint(0, 255, (num_classes, 3), dtype=np.uint8)  
        color_mask = colors[mask]
        return color_mask

    def run(self):
        rospy.spin()

if __name__ == '__main__':
    try:
        node = SemanticSegmentationNode()
        node.run()
    except rospy.ROSInterruptException:
        pass
